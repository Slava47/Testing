import telebot
from telebot import types
import sqlite3
import atexit
import time
import os
from PIL import Image, ImageDraw, ImageFont
import random
import string
import sys

TOKEN = os.getenv('TOKEN')  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ '$'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('volunteer_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    link TEXT,
    points INTEGER DEFAULT 0,
    description TEXT  -- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS applications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT NOT NULL,
    group_name TEXT NOT NULL,
    faculty TEXT NOT NULL,
    event_id INTEGER,
    user_id INTEGER,
    needs_release INTEGER DEFAULT 0,
    FOREIGN KEY (event_id) REFERENCES events (id),
    UNIQUE (user_id, event_id)  -- –°–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_points (
    user_id INTEGER PRIMARY KEY,
    points INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_states (
    user_id INTEGER PRIMARY KEY,
    has_passed_captcha INTEGER DEFAULT 0
)
''')

# –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS saved_applications (
    user_id INTEGER PRIMARY KEY,
    full_name TEXT NOT NULL,
    group_name TEXT NOT NULL,
    faculty TEXT NOT NULL
)
''')

conn.commit()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [5656088749]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–ø–∏—Å–∫–∏
user_ids = []
last_message_time = {}
repeat_count = {}
user_captchas = {}
user_requests = {}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏
def generate_captcha(text):
    width, height = 200, 100
    image = Image.new('RGB', (width, height), color=(255, 255, 255))
    draw = ImageDraw.Draw(image)

    font = ImageFont.load_default()
    
    draw.text((50, 25), text, fill=(0, 0, 0), font=font)

    for _ in range(5):
        draw.line([(random.randint(0, width), random.randint(0, height)),
                    (random.randint(0, width), random.randint(0, height))],
                   fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)), width=2)

    return image
@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞—á–∞—Ç—å!")
def start(message):
    user_id = message.from_user.id

    cursor.execute('SELECT has_passed_captcha FROM user_states WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result and result[0] == 1:
        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        show_main_menu(message)
        return

    captcha_text = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    
    captcha_image = generate_captcha(captcha_text)
    
    user_captchas[user_id] = captcha_text
    
    captcha_image_path = 'captcha.png'
    captcha_image.save(captcha_image_path)

    with open(captcha_image_path, 'rb') as captcha_file:
        bot.send_photo(message.chat.id, captcha_file)
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞–ø—á–∏:")
    
    bot.register_next_step_handler(message, lambda msg: check_captcha(msg, captcha_text))

def check_captcha(message, correct_text):
    user_id = message.from_user.id

    if message.text.strip().upper() == correct_text:
        bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        
        cursor.execute('INSERT OR REPLACE INTO user_states (user_id, has_passed_captcha) VALUES (?, ?)', (user_id, 1))
        conn.commit()

        del user_captchas[user_id]
        show_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    btn_show_events = types.KeyboardButton("üü¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    markup.add(btn_show_events)

    btn_apply_event = types.KeyboardButton("üü¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    markup.add(btn_apply_event)

    btn_my_points = types.KeyboardButton("üü¢ –ú–æ–∏ –±–∞–ª–ª—ã")
    markup.add(btn_my_points)

    btn_send_report = types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
    markup.add(btn_send_report)

    btn_edit_data = types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")  
    markup.add(btn_edit_data)

    if message.from_user.id in ADMIN_IDS:
        btn_send_link = types.KeyboardButton("üü¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤")
        markup.add(btn_send_link)

        btn_add_event = types.KeyboardButton("üü¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        markup.add(btn_add_event)

        btn_delete_event = types.KeyboardButton("üü¢ –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        markup.add(btn_delete_event)

        btn_send_points = types.KeyboardButton("üü¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–ª–ª—ã")
        markup.add(btn_send_points)

    btn_request_link = types.KeyboardButton("üîó –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ —á–∞—Å—ã")
    markup.add(btn_request_link)

    btn_rating = types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")
    markup.add(btn_rating)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
def edit_saved_data(message):
   user_id = message.from_user.id
   cursor.execute('SELECT * FROM saved_applications WHERE user_id=?', (user_id,))
   saved_data = cursor.fetchone()

   if saved_data:
       show_edit_menu(message)
   else:
       bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

def show_edit_menu(message):
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

   btn_edit_full_name = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
   markup.add(btn_edit_full_name)

   btn_edit_group = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
   markup.add(btn_edit_group)

   btn_edit_faculty = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
   markup.add(btn_edit_faculty)

   btn_cancel = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")  
   markup.add(btn_cancel)

   bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
   bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
   show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
def change_full_name(message):
   user_id = message.from_user.id
   cursor.execute('SELECT full_name FROM saved_applications WHERE user_id=?', (user_id,))
   result = cursor.fetchone()

   if result:
       old_full_name = result[0]  
       bot.send_message(message.chat.id, f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –§–ò–û: {old_full_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
       bot.register_next_step_handler(message, lambda msg: update_full_name(msg, old_full_name))
   else:
       bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –§–ò–û.")

def update_full_name(message, old_full_name):
   new_full_name = message.text.strip() or old_full_name
   user_id = message.from_user.id

   cursor.execute('UPDATE saved_applications SET full_name=? WHERE user_id=?', (new_full_name, user_id))
   conn.commit()

   bot.send_message(message.chat.id, "–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
   show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
def change_group_name(message):
   user_id = message.from_user.id
   cursor.execute('SELECT group_name FROM saved_applications WHERE user_id=?', (user_id,))
   result = cursor.fetchone()

   if result:
       old_group_name = result[0]  
       bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {old_group_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
       bot.register_next_step_handler(message, lambda msg: update_group_name(msg, old_group_name))
   else:
       bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")

def update_group_name(message, old_group_name):
   new_group_name = message.text.strip() or old_group_name
   user_id = message.from_user.id

   cursor.execute('UPDATE saved_applications SET group_name=? WHERE user_id=?', (new_group_name, user_id))
   conn.commit()

   bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
   show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
def change_faculty_name(message):
   user_id = message.from_user.id
   cursor.execute('SELECT faculty FROM saved_applications WHERE user_id=?', (user_id,))
   result = cursor.fetchone()

   if result:
       old_faculty = result[0]  
       bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {old_faculty}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
       bot.register_next_step_handler(message, lambda msg: update_faculty_name(msg, old_faculty))
   else:
       bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.")

def update_faculty_name(message, old_faculty):
   new_faculty = message.text.strip() or old_faculty
   user_id = message.from_user.id

   cursor.execute('UPDATE saved_applications SET faculty=? WHERE user_id=?', (new_faculty, user_id))
   conn.commit()

   bot.send_message(message.chat.id, "–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
   show_main_menu(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
@bot.message_handler(func=lambda message: message.text == "üü¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def show_events(message):
    cursor.execute('SELECT name FROM events')
    events = cursor.fetchall()
    
    if events:
        markup = types.InlineKeyboardMarkup()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        
        for event in events:
            button = types.InlineKeyboardButton(event[0], callback_data=event[0])  
            markup.add(button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(message.chat.id, "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=markup)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cancel_button = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_markup.add(cancel_button)
        
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'.", reply_markup=cancel_markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@bot.callback_query_handler(func=lambda call: True)
def handle_event_selection(call):
    selected_event = call.data  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    
    cursor.execute('SELECT description FROM events WHERE name = ?', (selected_event,))
    event_info = cursor.fetchone()

    if event_info:
        bot.send_message(call.message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ '{selected_event}':\n{event_info[0]}")
    else:
        bot.send_message(call.message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@bot.callback_query_handler(func=lambda call: True)
def handle_event_selection(call):
   selected_event = call.data  
   
   cursor.execute('SELECT description FROM events WHERE name = ?', (selected_event,))
   event_info = cursor.fetchone()

   if event_info:
       bot.send_message(call.message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ '{selected_event}':\n{event_info[0]}")
   else:
       bot.send_message(call.message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@bot.message_handler(func=lambda message: message.text == "üü¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def get_event_for_application(message):
    cursor.execute('SELECT name FROM events')
    events = cursor.fetchall()

    if events:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for event in events:
            markup.add(event[0])
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, handle_event_selection)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏.")

def handle_event_selection(message):
    selected_event = message.text.strip()

    if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return

    cursor.execute('SELECT id FROM events WHERE name = ?', (selected_event,))
    event_id_result = cursor.fetchone()

    if event_id_result:
        cursor.execute('SELECT * FROM saved_applications WHERE user_id=?', (message.from_user.id,))
        saved_data = cursor.fetchone()

        if saved_data:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù—É–∂–Ω–æ –ª–∏ –≤–∞–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç)")
            bot.register_next_step_handler(message, lambda msg: submit_application(msg, saved_data[1], saved_data[2], saved_data[3], event_id_result[0]))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
            bot.register_next_step_handler_by_chat_id(message.from_user.id, lambda msg: ask_for_group(msg, event_id_result[0]))
    else:
        bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def ask_for_group(message, event_id):
    full_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
    bot.register_next_step_handler(message, lambda msg: ask_for_faculty(msg, full_name, event_id))

def ask_for_faculty(message, full_name, event_id):
    group_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
    bot.register_next_step_handler(message, lambda msg: submit_application(msg, full_name, group_name, msg.text.strip(), event_id))

def submit_application(message, full_name, group_name, faculty, event_id):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
    needs_release = 1 if message.text.lower() == '–¥–∞' else 0 

    cursor.execute('SELECT * FROM applications WHERE user_id=? AND event_id=?', (user_id, event_id))
    existing_application = cursor.fetchone()

    if existing_application:
        bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    cursor.execute(
        'INSERT INTO applications (full_name , group_name , faculty , event_id , user_id , needs_release) VALUES (?, ?, ?, ?, ?, ?)',
        (full_name , group_name , faculty , event_id , user_id , needs_release)
    )
    
    conn.commit()

    cursor.execute('SELECT name FROM events WHERE id=?', (event_id,))
    event_name = cursor.fetchone()[0]

    cursor.execute('INSERT OR REPLACE INTO saved_applications (user_id , full_name , group_name , faculty) VALUES (?, ?, ?, ?)', 
                   (user_id , full_name , group_name , faculty))
    
    conn.commit()

    for admin in ADMIN_IDS:
        bot.send_message(
            admin,
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–§–ò–û:{full_name}\n–ì—Ä—É–ø–ø–∞:{group_name}\n–§–∞–∫—É–ª—å—Ç–µ—Ç:{faculty}\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:{event_name}\n–ù—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ: {'–î–∞' if needs_release else '–ù–µ—Ç'}"
        )
    
    bot.send_message(message.chat.id,"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@bot.message_handler(func=lambda message: message.text == "üîó –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ —á–∞—Å—ã")
def request_event_link(message):
   cursor.execute('SELECT name FROM events')
   events = cursor.fetchall()

   if events:
       markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
       for event in events:
           markup.add(event[0])
       markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
       bot.send_message(
           message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏:", reply_markup=markup)
       bot.register_next_step_handler(message , handle_request_link)
   else:
       bot.send_message(message.chat.id,"–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏.")

def handle_request_link(message):
   selected_event = message.text.strip()
   if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
       cancel_action(message)
       return

   cursor.execute('SELECT id FROM events WHERE name=?', (selected_event,))
   event_id_result = cursor.fetchone()

   if not event_id_result:
       bot.send_message(message.chat.id,"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
       return

   event_id = event_id_result[0]

   cursor.execute('INSERT OR IGNORE INTO applications (user_id,event_id) VALUES (?, ?)', (message.from_user.id,event_id))

   for admin in ADMIN_IDS:
       bot.send_message(admin,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{selected_event}'.")

   bot.send_message(message.chat.id,"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
@bot.message_handler(func=lambda message: message.text == "üü¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤")
def prompt_send_link(message):
   if message.from_user.id in ADMIN_IDS:
       cursor.execute('SELECT name FROM events')
       events = cursor.fetchall()

       if events:
           markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
           for event in events:
               markup.add(event[0])  
           markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
           bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=markup)
           bot.register_next_step_handler(message , select_event_for_link)
       else:
           bot.send_message(message.chat.id,"–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏.")

def select_event_for_link(message):
   selected_event = message.text.strip()
   
   if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
       cancel_action(message)
       return

   cursor.execute('SELECT id FROM events WHERE name=?',(selected_event,))
   event_id_result = cursor.fetchone()

   if not event_id_result:
       bot.send_message(message.chat.id,"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
       return

   event_id = event_id_result[0]
   
   cursor.execute('SELECT user_id FROM applications WHERE event_id=?', (event_id,))
   users = cursor.fetchall()

   if users:
       markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
       for user in users:
           user_info = bot.get_chat(user[0])  
           markup.add(user_info.first_name)  
       
       bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=markup)
       bot.register_next_step_handler(message , lambda msg: ask_for_link(msg,event_id))
   else:
       bot.send_message(message.chat.id,"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")

def ask_for_link(message,event_id):
   selected_user_name = message.text.strip()
   
   cursor.execute('SELECT user_id FROM applications WHERE event_id=?', (event_id,))
   users = cursor.fetchall()
   
   selected_user_ids = [user[0] for user in users]
   
   selected_user = None
   
   for user in selected_user_ids:
       user_info = bot.get_chat(user)  
       if user_info.first_name == selected_user_name:
           selected_user = user  
           break

   if selected_user is None:
       bot.send_message(message.chat.id,"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
       return

   bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:")
   bot.register_next_step_handler(message , lambda msg: send_link_to_user(msg , selected_user))

def send_link_to_user(message , selected_user):
   link = message.text.strip()
   
   bot.send_message(selected_user,f"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {link}")
   
   bot.send_message(message.chat.id,"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –±–∞–ª–ª—ã"
@bot.message_handler(func=lambda message: message.text == "üü¢ –ú–æ–∏ –±–∞–ª–ª—ã")
def show_user_points(message):
   user_id = message.from_user.id
   
   cursor.execute('SELECT points FROM user_points WHERE user_id=?', (user_id,))
   result = cursor.fetchone()

   if result:
       points = result[0]
       bot.send_message(message.chat.id,f"–£ –≤–∞—Å {points} –±–∞–ª–ª–æ–≤.")
   else:
       bot.send_message(message.chat.id,"–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–µ–π—Ç–∏–Ω–≥"
@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def show_rating(message):
    cursor.execute('''
        SELECT u.full_name AS full_name, COALESCE(SUM(up.points), 0) AS total_points
        FROM saved_applications u LEFT JOIN user_points up ON u.user_id = up.user_id
        GROUP BY u.user_id
        ORDER BY total_points DESC;
    ''')
    ratings = cursor.fetchall()

    if ratings:
        rating_list = "\n".join([f"{i + 1}. {r[0]} - {r[1]} –±–∞–ª–ª–æ–≤" for i, r in enumerate(ratings)])
        bot.send_message(
            message.chat.id, f"–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{rating_list}"
        )
    else:
        bot.send_message(
            message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@bot.message_handler(func=lambda message: message.text == "üü¢ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def prompt_add_event(message):
    if message.from_user.id in ADMIN_IDS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, save_event)

def save_event(message):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return

    event_name = message.text.strip()

    if event_name:  
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
        bot.register_next_step_handler(message, lambda msg: save_event_with_link(msg, event_name))
    else:
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, save_event)

def save_event_with_link(message, event_name):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return

    link = message.text.strip() or None  
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
    bot.register_next_step_handler(message, lambda msg: save_event_with_description(msg, event_name, link))

def save_event_with_description(message, event_name, link):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return

    description = message.text.strip() or None

    cursor.execute('INSERT INTO events (name, link, description) VALUES (?, ?, ?)', (event_name, link, description))
    conn.commit()

    for admin in ADMIN_IDS: 
        bot.send_message(admin, f"–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: '{event_name}'")

    bot.send_message(message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    show_main_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
   bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
   show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@bot.message_handler(func=lambda message: message.text == "üü¢ –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def delete_event(message):
	if message.from_user.id in ADMIN_IDS:
	    cursor.execute('SELECT name FROM events')
	    events=cursor.fetchall()

	    if events:
	        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True)
	        for event in events:
	            markup.add(event[0])
	        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
	        bot.send_message(
	            message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
	        bot.register_next_step_handler(
	            message , confirm_delete_event)
	    else:
	        bot.send_message(
	            message.chat.id,"–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def confirm_delete_event(message):
	selected_event = message.text.strip()
	
	if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
	    cancel_action(message)
	    return
	
	cursor.execute('DELETE FROM events WHERE name=?', (selected_event,))
	conn.commit()
	
	for admin in ADMIN_IDS: 
	    for user in user_ids:
	        bot.send_message(user, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{selected_event}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
	
	bot.send_message(
	    message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{selected_event}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
	)

@bot.message_handler(func=lambda message: message.text == "üü¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–ª–ª—ã")
def send_points_menu(message):
    if message.from_user.id in ADMIN_IDS:
        cursor.execute('SELECT name FROM events')
        events = cursor.fetchall()

        if events:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            for event in events:
                markup.add(event[0])
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–ª–ª–æ–≤:", reply_markup=markup)
            bot.register_next_step_handler(message, select_user_for_points)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–ª–ª–æ–≤.")

def select_user_for_points(message):
    selected_event = message.text.strip()
    
    if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        return
    
    cursor.execute('SELECT id FROM events WHERE name=?', (selected_event,))
    event_id_result = cursor.fetchone()

    if not event_id_result:
        bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    event_id = event_id_result[0]
    
    cursor.execute('SELECT full_name FROM applications WHERE event_id=?', (event_id,))
    applicants = cursor.fetchall()

    if applicants:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for app in applicants:
            markup.add(app[0])
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: set_points(msg, event_id))
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")

def set_points(message, selected_event_id):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        return
    
    selected_user_full_name = message.text.strip()
    
    cursor.execute('SELECT user_id FROM applications WHERE full_name=? AND event_id=?',
                   (selected_user_full_name.strip(), selected_event_id))
    
    user_data = cursor.fetchone()
    
    if user_data:
        user_id = user_data[0]
        
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:")
        bot.register_next_step_handler(
            message, lambda msg: update_points(msg, selected_event_id, user_id))
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def update_points(message, event_id, user_id):
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        return

    try:
        points = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        cursor.execute('SELECT points FROM user_points WHERE user_id=?', (user_id,))
        result = cursor.fetchone()

        if result:
            cursor.execute('UPDATE user_points SET points=points+? WHERE user_id=?', (points, user_id))
        else:
            cursor.execute('INSERT INTO user_points (user_id, points) VALUES (?, ?)', (user_id, points))

        conn.commit()

        cursor.execute('SELECT name FROM events WHERE id=?', (event_id,))
        event_name = cursor.fetchone()[0]

        bot.send_message(user_id,
                         f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ '{event_name}'.")

        for admin in ADMIN_IDS:
            bot.send_message(admin,
                             f"–ë–∞–ª–ª—ã –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, lambda msg: update_points(msg, event_id, user_id))  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥

def cancel_action(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"
@bot.message_handler(func=lambda message: message.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
def prompt_send_report(message):
	cursor.execute('SELECT name FROM events')
	events = cursor.fetchall()

	if events:
		markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
		for event in events:
			markup.add(event[0])
		markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–¥–µ—Å—å 
		bot.send_message(
			message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)
		bot.register_next_step_handler(message , check_application_before_report)  
	else:
		bot.send_message(message.chat.id,"–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")

def check_application_before_report(message):
    selected_event = message.text.strip()     
    if selected_event == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    
    cursor.execute('SELECT id FROM events WHERE name = ?', (selected_event,))
    event_id_result = cursor.fetchone()

    if not event_id_result:
        bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    event_id = event_id_result[0]
    
    cursor.execute('SELECT * FROM applications WHERE event_id = ? AND user_id = ?', (event_id, message.from_user.id))
    
    application_exists = cursor.fetchone()
    
    if application_exists:  
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: handle_report_content(msg, event_id)
        )
    else:  
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É.")

def handle_report_content(message, event_id):
    if message.content_type == 'text':
        report_content = message.text.strip()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ
        cursor.execute('SELECT name FROM events WHERE id = ?', (event_id,))
        event_name = cursor.fetchone()[0]
        
        for admin in ADMIN_IDS:
            bot.send_message(admin,
                             f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}:\n"
                             f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID: {event_id}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}\n"
                             f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:\n{report_content}")

        bot.send_message(message.chat.id, "–í–∞—à —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É!")


    elif message.content_type in ['photo', 'video']:
        media_file_id = message.photo[-1].file_id if message.content_type == 'photo' else message.video.file_id
        report_content = f"–û—Ç—á–µ—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º. ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {media_file_id}"
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
        cursor.execute('SELECT name FROM events WHERE id = ?', (event_id,))
        event_name = cursor.fetchone()[0]
        
        for admin in ADMIN_IDS:
            bot.send_message(admin,
                             f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}:\n"
                             f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID: {event_id}\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}\n"
                             f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:\n{report_content}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–¥–∏–∞—Ñ–∞–π–ª
            if message.content_type == 'photo':
                file_info = bot.get_file(media_file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                with open("temp_photo.jpg", 'wb') as new_file:
                    new_file.write(downloaded_file)
                with open("temp_photo.jpg", 'rb') as new_file:
                    bot.send_photo(admin, new_file)
            
            elif message.content_type == 'video':
                file_info = bot.get_file(media_file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                with open("temp_video.mp4", 'wb') as new_file:
                    new_file.write(downloaded_file)
                with open("temp_video.mp4", 'rb') as new_file:
                    bot.send_video(admin, new_file)

        bot.send_message(message.chat.id, "–í–∞—à –æ—Ç—á–µ—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    if message.from_user.id in last_message_time:
        if current_time - last_message_time[message.from_user.id] < 1:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É.
            handle_unusual_behavior(message.from_user.id)
            return
        
        if repeat_count.get(message.text) and repeat_count[message.text] >= 3:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ 3 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
            handle_unusual_behavior(message.from_user.id)
            return
        
        repeat_count[message.text] += 1
    
    last_message_time[message.from_user.id] = current_time

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
def handle_unusual_behavior(user_id):
    bot.send_message(user_id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç–µ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—É.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    atexit.register(lambda: conn.close())  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            os.execv(sys.executable, ['python'] + sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç
